// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  size       Size[]      @relation("StoreToSize")
  quantity   Quantity[]  @relation("StoreToQuantity")
  product    Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  description String     @default("")
  imageUrl    String
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id              String    @id @default(uuid())
  slug            String    @unique
  storeId         String
  store           Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId     String
  billboard       Billboard @relation(fields: [billboardId], references: [id])
  // product       Product[]     @relation("CategoryToProduct")
  name            String
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Define a relation to Subcategories

  subcategory Subcategory[] @relation("SubCategoryToCategory")
  Product     Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Subcategory {
  id   String @id @default(uuid())
  name String
  slug String @unique

  metaTitle       String?
  metaDescription String?

  // Define a relation to Category
  categoryId  String
  category    Category @relation("SubCategoryToCategory", fields: [categoryId], references: [id])
  description String?

  // Define a relation to Products
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Quantity {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToQuantity", fields: [storeId], references: [id])
  product   Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id            String   @id @default(uuid())
  slug          String   @unique
  storeId       String
  store         Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  name          String
  description   String
  actualPrice   Decimal
  discountPrice Decimal?
  images        Image[]

  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  categoryId    String?
  category      Category?    @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  sizeId        String
  size          Size         @relation(fields: [sizeId], references: [id])
  quantityId    String
  quantity      Quantity     @relation(fields: [quantityId], references: [id])
  OrderItem     OrderItem[]
  timeFrame     Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subcategoryId])
  @@index([storeId])
  @@index([categoryId])
  @@index([quantityId])
  @@index([sizeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
